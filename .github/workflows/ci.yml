name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  frontend:
    name: Frontend (Lint + Build)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Run TypeScript & CSS lint (check only)
        run: |
          npx eslint .
          npx stylelint "**/*.css"
        working-directory: frontend

      - name: Run Prettier
        run: npx prettier --check "**/*.{ts,css}"
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

  backend:
    name: Backend (Lint + Test)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install Go dependencies
        run: go mod download
        working-directory: backend

      - name: Run Go lint
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...
        working-directory: backend

      - name: Check Go Formatting
        run: |
          fmt_out=$(gofmt -s -l .)
          if [ -n "$fmt_out" ]; then
            echo "Go files not properly formatted:"
            echo "$fmt_out"
            exit 1
          fi
        working-directory: backend

      - name: Run Go Unit Tests
        run: go test -v ./...
        working-directory: backend
 
  cypress:
    name: E2E Tests (Cypress)
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # -------- Front-end deps (same as in the frontend job) --------
      - name: Install frontend deps
        run: npm ci
        working-directory: frontend

      # -------- Generate the .env file for docker -------
      - name: Generate dev .env
        run: |
          cat > .env <<'EOF'
          POSTGRES_USERNAME=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB_NAME=speedroulette
          POSTGRES_DB_HOST=db
          POSTGRES_DB_PORT=5432
          REDIS_ADDRESS=redis:6379
          REDIS_PASSWORD=
          REDIS_DB=0
          ENV=development
          BUILD_MODE=nginxserver
          FRONTEND_PORT=5173
          EOF

      # -------- Bring up the backend & db containers ---------------
      - name: Start backend stack
        run: docker compose up -d db redis backend

      # -------- Run Cypress --------------
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 90

  docker:
    name: Docker Build Check
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate dev .env
        run: |
          cat > .env <<'EOF'
          POSTGRES_USERNAME=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB_NAME=speedroulette
          POSTGRES_DB_HOST=db
          POSTGRES_DB_PORT=5432
          REDIS_ADDRESS=redis:6379
          REDIS_PASSWORD=
          REDIS_DB=0
          ENV=development
          BUILD_MODE=nginxserver
          FRONTEND_PORT=80
          EOF

      - name: Build Docker Compose stack
        working-directory: ${{ github.workspace }}
        run: docker compose -f compose.yml build
